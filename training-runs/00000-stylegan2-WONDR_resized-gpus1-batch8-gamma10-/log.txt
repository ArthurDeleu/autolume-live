Loading training set...
/home/arthurdeleu/miniconda3/envs/autolume_test/lib/python3.9/site-packages/torch/utils/data/sampler.py:64: UserWarning: `data_source` argument is not used and will be removed in 2.2.0.You may still have custom implementation that utilizes it.
  warnings.warn("`data_source` argument is not used and will be removed in 2.2.0."

Num images:  1408
Image shape: [3, 512, 512]
Label shape: [0]

Constructing networks...
starting G epochs:  0.0
Setting up PyTorch plugin "bias_act_plugin"... Failed!

Generator             Parameters  Buffers  Output shape        Datatype
---                   ---         ---      ---                 ---     
mapping.fc0           262656      -        [8, 512]            float32 
mapping.fc1           262656      -        [8, 512]            float32 
mapping.fc2           262656      -        [8, 512]            float32 
mapping.fc3           262656      -        [8, 512]            float32 
mapping.fc4           262656      -        [8, 512]            float32 
mapping.fc5           262656      -        [8, 512]            float32 
mapping.fc6           262656      -        [8, 512]            float32 
mapping.fc7           262656      -        [8, 512]            float32 
mapping               -           512      [8, 16, 512]        float32 
synthesis.b4.conv1    2622465     32       [8, 512, 4, 4]      float32 
synthesis.b4.torgb    264195      -        [8, 3, 4, 4]        float32 
synthesis.b4:0        8192        16       [8, 512, 4, 4]      float32 
synthesis.b4:1        -           -        [8, 3, 4, 4]        float32 
synthesis.b8.conv0    2622465     80       [8, 512, 8, 8]      float32 
synthesis.b8.conv1    2622465     80       [8, 512, 8, 8]      float32 
synthesis.b8.torgb    264195      -        [8, 3, 8, 8]        float32 
synthesis.b8:0        -           16       [8, 512, 8, 8]      float32 
synthesis.b8:1        -           -        [8, 3, 8, 8]        float32 
synthesis.b16.conv0   2622465     272      [8, 512, 16, 16]    float32 
synthesis.b16.conv1   2622465     272      [8, 512, 16, 16]    float32 
synthesis.b16.torgb   264195      -        [8, 3, 16, 16]      float32 
synthesis.b16:0       -           16       [8, 512, 16, 16]    float32 
synthesis.b16:1       -           -        [8, 3, 16, 16]      float32 
synthesis.b32.conv0   2622465     1040     [8, 512, 32, 32]    float32 
synthesis.b32.conv1   2622465     1040     [8, 512, 32, 32]    float32 
synthesis.b32.torgb   264195      -        [8, 3, 32, 32]      float32 
synthesis.b32:0       -           16       [8, 512, 32, 32]    float32 
synthesis.b32:1       -           -        [8, 3, 32, 32]      float32 
synthesis.b64.conv0   2622465     4112     [8, 512, 64, 64]    float16 
synthesis.b64.conv1   2622465     4112     [8, 512, 64, 64]    float16 
synthesis.b64.torgb   264195      -        [8, 3, 64, 64]      float16 
synthesis.b64:0       -           16       [8, 512, 64, 64]    float16 
synthesis.b64:1       -           -        [8, 3, 64, 64]      float32 
synthesis.b128.conv0  1442561     16400    [8, 256, 128, 128]  float16 
synthesis.b128.conv1  721409      16400    [8, 256, 128, 128]  float16 
synthesis.b128.torgb  132099      -        [8, 3, 128, 128]    float16 
synthesis.b128:0      -           16       [8, 256, 128, 128]  float16 
synthesis.b128:1      -           -        [8, 3, 128, 128]    float32 
synthesis.b256.conv0  426369      65552    [8, 128, 256, 256]  float16 
synthesis.b256.conv1  213249      65552    [8, 128, 256, 256]  float16 
synthesis.b256.torgb  66051       -        [8, 3, 256, 256]    float16 
synthesis.b256:0      -           16       [8, 128, 256, 256]  float16 
synthesis.b256:1      -           -        [8, 3, 256, 256]    float32 
synthesis.b512.conv0  139457      262160   [8, 64, 512, 512]   float16 
synthesis.b512.conv1  69761       262160   [8, 64, 512, 512]   float16 
synthesis.b512.torgb  33027       -        [8, 3, 512, 512]    float16 
synthesis.b512:0      -           16       [8, 64, 512, 512]   float16 
synthesis.b512:1      -           -        [8, 3, 512, 512]    float32 
---                   ---         ---      ---                 ---     
Total                 30276583    699904   -                   -       


ProjectedDiscriminator                                               Parameters  Buffers  Output shape       Datatype
---                                                                  ---         ---      ---                ---     
feature_network.pretrained.layer0.0                                  864         -        [8, 32, 256, 256]  float32 
feature_network.pretrained.layer0.1                                  64          65       [8, 32, 256, 256]  float32 
feature_network.pretrained.layer0.3                                  896         98       [8, 16, 256, 256]  float32 
feature_network.pretrained.layer0.4                                  13968       1062     [8, 24, 128, 128]  float32 
feature_network.pretrained.layer1.0                                  39712       1702     [8, 40, 64, 64]    float32 
feature_network.pretrained.layer2.0                                  198480      5289     [8, 80, 32, 32]    float32 
feature_network.pretrained.layer2.1                                  446784      7977     [8, 112, 32, 32]   float32 
feature_network.pretrained.layer3.0                                  1652640     18060    [8, 192, 16, 16]   float32 
feature_network.pretrained.layer3.1                                  605440      5251     [8, 320, 16, 16]   float32 
feature_network.scratch.layer0_ccm                                   1600        -        [8, 64, 128, 128]  float32 
feature_network.scratch.layer1_ccm                                   5248        -        [8, 128, 64, 64]   float32 
feature_network.scratch.layer2_ccm                                   28928       -        [8, 256, 32, 32]   float32 
feature_network.scratch.layer3_ccm                                   164352      -        [8, 512, 16, 16]   float32 
feature_network.scratch.layer3_csm.out_conv                          131328      -        [8, 256, 32, 32]   float32 
feature_network.scratch.layer2_csm.skip_add.activation_post_process  -           -        [8, 256, 32, 32]   float32 
feature_network.scratch.layer2_csm.out_conv                          32896       -        [8, 128, 64, 64]   float32 
feature_network.scratch.layer1_csm.skip_add.activation_post_process  -           -        [8, 128, 64, 64]   float32 
feature_network.scratch.layer1_csm.out_conv                          8256        -        [8, 64, 128, 128]  float32 
feature_network.scratch.layer0_csm.skip_add.activation_post_process  -           -        [8, 64, 128, 128]  float32 
feature_network.scratch.layer0_csm.out_conv                          4160        -        [8, 64, 256, 256]  float32 
discriminator.mini_discs.0.main                                      190848      12137    [8, 1, 13, 13]     float32 
discriminator.mini_discs.1.main                                      186048      11807    [8, 1, 13, 13]     float32 
discriminator.mini_discs.2.main                                      177024      11285    [8, 1, 13, 13]     float32 
discriminator.mini_discs.3.main                                      142592      10251    [8, 1, 13, 13]     float32 
discriminator                                                        -           -        [8, 676]           float32 
---                                                                  ---         ---      ---                ---     
Total                                                                4032128     84984    -                  -       

Setting up augmentation...
Distributing across 1 GPUs...
Setting up training phases...
Exporting sample images...
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
RGB
(3, 512, 512) (3, 512, 512)
(3, 512, 512) (3, 512, 512)
Initializing logs...
Skipping tfevents export: No module named 'tensorboard'
Training for 25000 kimg...

torch.Size([8, 3, 512, 512])
Process Process-2:
Traceback (most recent call last):
  File "/home/arthurdeleu/miniconda3/envs/autolume_test/lib/python3.9/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/home/arthurdeleu/miniconda3/envs/autolume_test/lib/python3.9/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/train.py", line 390, in main
    launch_training(c=c, desc=desc, outdir=opts.outdir, dry_run=opts.dry_run)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/train.py", line 99, in launch_training
    subprocess_fn(rank=0, c=c, temp_dir=temp_dir)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/train.py", line 47, in subprocess_fn
    training_loop.training_loop(rank=rank, **c)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/training/training_loop.py", line 290, in training_loop
    loss.accumulate_gradients(phase=phase.name, real_img=real_img, real_c=real_c, gen_z=gen_z, gen_c=gen_c, gain=phase.interval, cur_nimg=cur_nimg)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/training/losses/scratch_loss.py", line 151, in accumulate_gradients
    gen_logits = self.run_D(gen_img, gen_c, blur_sigma=blur_sigma)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/training/losses/scratch_loss.py", line 132, in run_D
    img = self.augment_pipe(img)
  File "/home/arthurdeleu/miniconda3/envs/autolume_test/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/arthurdeleu/miniconda3/envs/autolume_test/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/training/augment.py", line 292, in forward
    images = upfirdn2d.upsample2d(x=images, f=self.Hz_geom, up=2)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/torch_utils/ops/upfirdn2d.py", line 356, in upsample2d
    return upfirdn2d(x, f, up=up, padding=p, flip_filter=flip_filter, gain=gain*upx*upy, impl=impl)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/torch_utils/ops/upfirdn2d.py", line 170, in upfirdn2d
    return _upfirdn2d_ref(x, f, up=up, down=down, padding=padding, flip_filter=flip_filter, gain=gain)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/torch_utils/misc.py", line 103, in decorator
    return fn(*args, **kwargs)
  File "/media/arthurdeleu/T7/autolumelive_colab/autolumelive_colab/torch_utils/ops/upfirdn2d.py", line 200, in _upfirdn2d_ref
    x = torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 104.00 MiB. GPU 0 has a total capacty of 7.79 GiB of which 4.94 MiB is free. Process 49733 has 566.00 MiB memory in use. Including non-PyTorch memory, this process has 7.23 GiB memory in use. Of the allocated memory 6.95 GiB is allocated by PyTorch, and 66.94 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
